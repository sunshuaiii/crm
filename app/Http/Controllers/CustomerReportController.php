<?php

namespace App\Http\Controllers;

use App\Models\Customer;
use App\Models\CustomerCoupon;
use App\Models\Ticket;
use Carbon\Carbon;
use Illuminate\Support\Facades\DB;

class CustomerReportController extends Controller
{
    public function customerBehaviourReport($startDate, $endDate)
    {
        // Initialize an empty array to store the report datasets
        $reportDatasets = [];

        // Section 1: Overview
        $totalCustomers = Customer::count();
        $newCustomers = Customer::whereBetween('created_at', [$startDate, $endDate])->count();
        $newCustomersChartData = $this->getNewCustomersChartData($startDate, $endDate);

        // Section 2: Customer Segmentation
        $segmentDistributionData = $this->calculateCustomerDistribution();

        // Section 3: Customer Engagement
        $ticketSubmitted = Ticket::whereBetween('created_at', [$startDate, $endDate])->count();
        $couponsClaimed = CustomerCoupon::where('status', 'Claimed')->whereBetween('created_at', [$startDate, $endDate])->count();
        $couponsRedeemed = CustomerCoupon::where('status', 'Redeemed')->whereBetween('updated_at', [$startDate, $endDate])->count();
        $customerEngagementChartData1 = $this->getCustomerEngagementChartData1($startDate, $endDate);
        $customerEngagementChartData2 = $this->getCustomerEngagementChartData2($startDate, $endDate);
        $customerEngagementChartData3 = $this->getCustomerEngagementChartData3($startDate, $endDate);

        // Section 4: Customer Demographics
        // Age Distribution Query
        $ageDistributionChartData = $this->getAgeDistributionChartData($startDate, $endDate);

        // Gender Distribution Query
        $genderDistributionChartData = $this->getGenderDistributionChartData($startDate, $endDate);

        // Section 5: Customer Lifetime Value (CLTV)
        // CLTV is calculated as the sum of the revenue generated by the customers within the segment within the start date and end date.
        $cltvBySegment = $this->calculateCLTVBySegment($startDate, $endDate);

        // those who have made the highest total purchases within the start date and end date
        // Get the top 10 high-value customers
        $topHighValueCustomers = $this->getTopHighValueCustomers($startDate, $endDate);

        // Section 6: Customer Activity Timeline
        $activityTimeline = $this->prepareActivityTimelineData($startDate, $endDate);

        // Section 7: Customer Loyalty Trends
        $repeatPurchases = DB::table('customers')
            ->select('customers.id', 'customers.username', 'customers.email', 'customers.first_name', 'customers.last_name', DB::raw('COUNT(checkouts.id) as purchase_count'))
            ->join('checkouts', 'customers.id', '=', 'checkouts.customer_id')
            ->whereBetween('checkouts.date', [$startDate, $endDate])
            ->groupBy('customers.id', 'customers.username', 'customers.email', 'customers.first_name', 'customers.last_name')
            ->having('purchase_count', '>', 1) // Customers with more than one purchase
            ->orderByDesc('purchase_count') // Sort by purchase_count in descending order
            ->limit(50)
            ->get();

        // Add the datasets to the reportDatasets array
        $reportDatasets['Overview'] = [
            'Total Customers' => $totalCustomers,
            'New Customers' => $newCustomers,
            'New Customers Chart Data' => $newCustomersChartData,
        ];

        $reportDatasets['Customer Segmentation'] = [
            'Segment Distribution Chart Data' => $segmentDistributionData,
        ];

        $reportDatasets['Customer Engagement'] = [
            'Ticket Submitted' => $ticketSubmitted,
            'Coupons Claimed' => $couponsClaimed,
            'Coupons Redeemed' => $couponsRedeemed,
            'Customer Engagement Chart Data 1' => $customerEngagementChartData1,
            'Customer Engagement Chart Data 2' => $customerEngagementChartData2,
            'Customer Engagement Chart Data 3' => $customerEngagementChartData3,
        ];

        $reportDatasets['Customer Demographics'] = [
            'Age Distribution Chart Data' => $ageDistributionChartData,
            'Gender Distribution Chart Data' => $genderDistributionChartData,
        ];

        $reportDatasets['Customer Lifetime Value (CLTV)'] = [
            'CLTV By Segment Chart Data' => $cltvBySegment,
            'Top 10 High Value Customers' => $topHighValueCustomers,
        ];

        $reportDatasets['Customer Activity Timeline'] = [
            'Activity Timeline Chart Data' => $activityTimeline,
        ];

        $reportDatasets['Customer Loyalty Trends'] = [
            'Repeat Purchases' => $repeatPurchases,
        ];

        // Add other sections and datasets as needed

        return $reportDatasets;
    }

    private function getGenderDistributionChartData($startDate, $endDate)
    {
        // Retrieve the gender distribution data
        $genderDistributionData = Customer::selectRaw('count(*) as count, gender')
            ->whereBetween('created_at', [$startDate, $endDate])
            ->groupBy('gender')
            ->get();

        // Extract gender labels and counts from the data
        $genderLabels = $genderDistributionData->pluck('gender');
        $genderCounts = $genderDistributionData->pluck('count');

        // Create an array for the chart data
        $chartData = [
            'labels' => $genderLabels,
            'datasets' => [
                [
                    'data' => $genderCounts,
                    'backgroundColor' => ['blue', 'pink'], // Adjust colors as needed
                ],
            ],
        ];

        return $chartData;
    }


    private function getAgeDistributionChartData($startDate, $endDate)
    {
        // Retrieve the age distribution data
        $ageDistributionData = Customer::selectRaw('count(*) as count, floor(datediff(current_date, dob) / 365.25) as age')
            ->whereBetween('created_at', [$startDate, $endDate])
            ->groupBy('age')
            ->orderBy('age')
            ->get();

        // Extract age labels and counts from the data
        $ageLabels = $ageDistributionData->pluck('age');
        $ageCounts = $ageDistributionData->pluck('count');

        // Create an array for the chart data
        $chartData = [
            'labels' => $ageLabels,
            'datasets' => [
                [
                    'label' => 'Age Distribution',
                    'data' => $ageCounts,
                    'backgroundColor' => 'rgba(75, 192, 192, 0.2)', // Adjust the color as needed
                    'borderColor' => 'rgba(75, 192, 192, 1)', // Adjust the color as needed
                    'borderWidth' => 1,
                ],
            ],
        ];

        return $chartData;
    }


    private function getCustomerEngagementChartData1($startDate, $endDate)
    {
        // Retrieve the count of ticket submissions for each day within the date range
        $ticketSubmittedData = Ticket::whereBetween('created_at', [$startDate, $endDate])
            ->select(DB::raw('DATE(created_at) as date'), DB::raw('COUNT(*) as count'))
            ->groupBy('date')
            ->orderBy('date')
            ->get();

        // Extract the date labels and counts from each dataset
        $dates = $ticketSubmittedData->pluck('date');
        $ticketCounts = $ticketSubmittedData->pluck('count');

        // Create an array for the chart data
        $chartData = [
            'labels' => $dates,
            'datasets' => [
                [
                    'label' => 'Ticket Submitted',
                    'data' => $ticketCounts,
                    'backgroundColor' => 'rgba(75, 192, 192, 0.2)', // Adjust the color as needed
                    'borderColor' => 'rgba(75, 192, 192, 1)', // Adjust the color as needed
                    'borderWidth' => 1,
                ],
            ],
        ];

        return $chartData;
    }

    private function getCustomerEngagementChartData2($startDate, $endDate)
    {
        // Retrieve the count of coupons claimed for each day within the date range
        $couponsClaimedData = CustomerCoupon::where('status', 'Claimed')
            ->whereBetween('created_at', [$startDate, $endDate])
            ->select(DB::raw('DATE(created_at) as date'), DB::raw('COUNT(*) as count'))
            ->groupBy('date')
            ->orderBy('date')
            ->get();

        // Extract the date labels and counts from each dataset
        $dates = $couponsClaimedData->pluck('date');
        $claimedCounts = $couponsClaimedData->pluck('count');

        // Create an array for the chart data
        $chartData = [
            'labels' => $dates,
            'datasets' => [
                [
                    'label' => 'Coupons Claimed',
                    'data' => $claimedCounts,
                    'backgroundColor' => 'rgba(255, 99, 132, 0.2)', // Adjust the color as needed
                    'borderColor' => 'rgba(255, 99, 132, 1)', // Adjust the color as needed
                    'borderWidth' => 1,
                ],
            ],
        ];

        return $chartData;
    }
    private function getCustomerEngagementChartData3($startDate, $endDate)
    {
        // Retrieve the count of coupons redeemed for each day within the date range
        $couponsRedeemedData = CustomerCoupon::where('status', 'Redeemed')
            ->whereBetween('updated_at', [$startDate, $endDate])
            ->select(DB::raw('DATE(updated_at) as date'), DB::raw('COUNT(*) as count'))
            ->groupBy('date')
            ->orderBy('date')
            ->get();

        // Extract the date labels and counts from each dataset
        $dates = $couponsRedeemedData->pluck('date');
        $redeemedCounts = $couponsRedeemedData->pluck('count');

        // Create an array for the chart data
        $chartData = [
            'labels' => $dates,
            'datasets' => [
                [
                    'label' => 'Coupons Redeemed',
                    'data' => $redeemedCounts,
                    'backgroundColor' => 'rgba(255, 205, 86, 0.2)', // Adjust the color as needed
                    'borderColor' => 'rgba(255, 205, 86, 1)', // Adjust the color as needed
                    'borderWidth' => 1,
                ],
            ],
        ];

        return $chartData;
    }

    private function getNewCustomersChartData($startDate, $endDate)
    {
        // Retrieve the count of new customers for each day within the date range
        $newCustomersData = Customer::whereBetween('created_at', [$startDate, $endDate])
            ->select(DB::raw('DATE(created_at) as date'), DB::raw('COUNT(*) as count'))
            ->groupBy('date')
            ->orderBy('date')
            ->get();

        // Extract the date labels and counts from the query result
        $dates = $newCustomersData->pluck('date');
        $counts = $newCustomersData->pluck('count');

        // Create an array for the chart data
        $chartData = [
            'labels' => $dates,
            'datasets' => [
                [
                    'label' => 'New Customers',
                    'data' => $counts,
                    'backgroundColor' => 'rgba(75, 192, 192, 0.2)', // Adjust the color as needed
                    'borderColor' => 'rgba(75, 192, 192, 1)', // Adjust the color as needed
                    'borderWidth' => 1,
                ],
            ],
        ];

        return $chartData;
    }

    private function getTopHighValueCustomers($startDate, $endDate)
    {
        // Retrieve customers who made checkouts within the date range
        $customers = Customer::whereHas('checkouts', function ($query) use ($startDate, $endDate) {
            $query->whereBetween('date', [$startDate, $endDate]);
        })->get();

        // Initialize an array to store customer total amounts
        $customerTotalAmounts = [];

        foreach ($customers as $customer) {
            // Retrieve customer's checkouts with related checkout products and products
            $checkouts = $customer->checkouts()
                ->with(['checkoutProducts.product'])
                ->get();

            // Initialize a variable to store the monetary score
            $totalAmount = 0;

            // Calculate the monetary score
            foreach ($checkouts as $checkout) {
                foreach ($checkout->checkoutProducts as $checkoutProduct) {
                    $product = $checkoutProduct->product;
                    if ($product && $product->unit_price !== null) {
                        $totalAmount += ($product->unit_price * $checkoutProduct->quantity);
                    }
                }
            }

            // Store the customer's total amount in the array
            $customerTotalAmounts[] = [
                'customer' => $customer,
                'totalAmount' => $totalAmount,
            ];
        }

        // Sort the array in descending order based on total amount
        usort($customerTotalAmounts, function ($a, $b) {
            return $b['totalAmount'] - $a['totalAmount'];
        });

        // Get the top 10 customers with the highest total amounts
        $topHighValueCustomers = array_slice($customerTotalAmounts, 0, 10);

        return $topHighValueCustomers;
    }

    private function calculateCLTVBySegment($startDate, $endDate)
    {
        // Initialize an empty array to store CLTV data
        $cltvBySegment = [];

        // Get distinct customer segments
        $distinctSegments = ['Silver', 'Gold', 'Platinum'];

        // Iterate through each segment
        foreach ($distinctSegments as $segment) {
            // Calculate CLTV for the current segment
            $segmentCLTV = 0;

            // Retrieve customers within the segment
            $customersInSegment = Customer::where('c_segment', $segment)->get();

            // Calculate CLTV for each customer in the segment
            foreach ($customersInSegment as $customer) {
                // Get checkouts within the specified date range for the customer
                $checkouts = $customer->checkouts()
                    ->with(['checkoutProducts.product'])
                    ->whereBetween('date', [$startDate, $endDate])
                    ->get();

                // Calculate total purchase amount for the customer
                $customerPurchaseAmount = 0;

                foreach ($checkouts as $checkout) {
                    foreach ($checkout->checkoutProducts as $checkoutProduct) {
                        $product = $checkoutProduct->product;
                        if ($product && $product->unit_price !== null) {
                            $customerPurchaseAmount += ($product->unit_price * $checkoutProduct->quantity);
                        }
                    }
                }

                // Add the customer's CLTV to the segment's CLTV
                $segmentCLTV += $customerPurchaseAmount;
            }

            // Store the segment's CLTV data in the array
            $cltvBySegment[] = [
                'segment' => $segment,
                'cltv' => $segmentCLTV,
            ];
        }

        return $cltvBySegment;
    }

    private function calculateCustomerDistribution()
    {
        $customerData = $this->getCustomerDistributionData();

        // Retrieve quantile values from the database
        $quantiles = $this->getQuantileValues();

        $rfmScores = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]; // Assuming these are the column names for RFM scores
        $customerSegments = ['Silver', 'Gold', 'Platinum', 'NA']; // Sample customer segments

        $customerDistribution = [];
        foreach ($rfmScores as $rfmScore) {
            foreach ($customerSegments as $segment) {
                $customerDistribution[$rfmScore][$segment] = 0;
            }
        }

        foreach ($customerData as $customer) {
            $rfmScore = $this->calculateRFMScore($customer->r_score, $customer->f_score, $customer->m_score, $quantiles);
            $segment = $customer->c_segment;
            $customerDistribution[$rfmScore][$segment]++;
        }

        return $customerDistribution;
    }

    private function getCustomerDistributionData()
    {
        // Replace this with your actual data retrieval logic
        return DB::table('customers')
            ->select('r_score', 'f_score', 'm_score', 'c_segment')
            ->get();
    }

    private function getQuantileValues()
    {
        $customers = DB::table('customers')
            ->select('r_score', 'f_score', 'm_score')
            ->get();

        $quantiles = [
            'r_score' => [],
            'f_score' => [],
            'm_score' => [],
        ];

        foreach (['r_score', 'f_score', 'm_score'] as $scoreType) {
            $sortedScores = $customers->pluck($scoreType)->sort()->values();
            $quantiles[$scoreType][0.25] = $sortedScores[ceil($sortedScores->count() * 0.25) - 1];
            $quantiles[$scoreType][0.50] = $sortedScores[ceil($sortedScores->count() * 0.50) - 1];
            $quantiles[$scoreType][0.75] = $sortedScores[ceil($sortedScores->count() * 0.75) - 1];
        }

        return $quantiles;
    }

    private function calculateRFMScore($r, $f, $m, $quantiles)
    {
        $rScore = $this->RScoring($r, 'r_score', $quantiles);
        $fScore = $this->FnMScoring($f, 'f_score', $quantiles);
        $mScore = $this->FnMScoring($m, 'm_score', $quantiles);

        // Combine the scores to get the RFM score
        $rfmScore = $rScore + $fScore + $mScore;

        return $rfmScore;
    }

    private function RScoring($x, $p, $d)
    {
        if ($x <= $d[$p][0.25]) {
            return 1;
        } elseif ($x <= $d[$p][0.50]) {
            return 2;
        } elseif ($x <= $d[$p][0.75]) {
            return 3;
        } else {
            return 4;
        }
    }

    private function FnMScoring($x, $p, $d)
    {
        if ($x <= $d[$p][0.25]) {
            return 4;
        } elseif ($x <= $d[$p][0.50]) {
            return 3;
        } elseif ($x <= $d[$p][0.75]) {
            return 2;
        } else {
            return 1;
        }
    }

    private function prepareActivityTimelineData($startDate, $endDate)
    {
        // Create an array to store the data
        $activityTimelineData = [];

        // Convert the start and end dates to Carbon instances for date manipulation
        $start = Carbon::parse($startDate);
        $end = Carbon::parse($endDate);

        // Loop through each day within the date range
        while ($start->lte($end)) {
            $date = $start->toDateString();

            // Replace this with your actual logic to count interactions for each day
            $ticketsCount = $this->countTicketsForDate($date);
            $claimedCouponsCount = $this->countClaimedCouponsForDate($date);
            $redeemedCouponsCount = $this->countRedeemedCouponsForDate($date);

            // Add data for the day to the array
            $activityTimelineData[] = [$date, $ticketsCount, $claimedCouponsCount, $redeemedCouponsCount];

            // Move to the next day
            $start->addDay();
        }

        return $activityTimelineData;
    }

    private function countTicketsForDate($date)
    {
        $ticketCount = Ticket::where('created_at', $date)->count();
        return  $ticketCount;
    }

    private function countClaimedCouponsForDate($date)
    {
        $couponsClaimed = CustomerCoupon::where('status', 'Claimed')->where('created_at', $date)->count();

        return $couponsClaimed;
    }

    private function countRedeemedCouponsForDate($date)
    {
        $couponsRedeemed = CustomerCoupon::where('status', 'Redeemed')->where('updated_at', $date)->count();

        return $couponsRedeemed;
    }

    public function salesPerformanceReport()
    {
        $reportDatasets = '';
        return $reportDatasets;
    }
}
